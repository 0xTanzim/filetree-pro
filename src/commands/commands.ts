import * as path from 'path';
import * as vscode from 'vscode';

export function registerCommands(): vscode.Disposable[] {
  const disposables: vscode.Disposable[] = [];

  // Generate File Tree command (main command)
  disposables.push(
    vscode.commands.registerCommand('filetreeproai.generateFileTree', async (uri: vscode.Uri) => {
      try {
        if (!uri) {
          vscode.window.showErrorMessage('Please right-click on a folder to generate file tree');
          return;
        }

        // Get the folder path
        const folderPath = uri.fsPath;
        const folderName = path.basename(folderPath);

        // Ask user for icon preference
        const iconChoice = await vscode.window.showQuickPick(['With Icons', 'Without Icons'], {
          placeHolder: 'Choose tree style',
          canPickMany: false,
        });

        if (!iconChoice) {
          return; // User cancelled
        }

        const useIcons = iconChoice === 'With Icons';

        // Show progress
        vscode.window.showInformationMessage(`Generating file tree for ${folderName}...`);

        // Generate the file tree
        const treeContent = await generateFileTree(folderPath, 10, useIcons);

        // Ask user where to save the file
        const saveUri = await vscode.window.showSaveDialog({
          defaultUri: vscode.Uri.file(path.join(folderPath, `file-tree-${folderName}.md`)),
          filters: {
            'Markdown Files': ['md'],
            'Text Files': ['txt'],
            'All Files': ['*'],
          },
          saveLabel: 'Save File Tree',
        });

        if (!saveUri) {
          return; // User cancelled
        }

        // Write the file to user-selected location
        await vscode.workspace.fs.writeFile(saveUri, Buffer.from(treeContent, 'utf8'));

        // Open the generated file
        const document = await vscode.workspace.openTextDocument(saveUri);
        await vscode.window.showTextDocument(document);

        const fileName = path.basename(saveUri.fsPath);
        vscode.window.showInformationMessage(
          `File tree generated successfully! Saved as ${fileName}`
        );
      } catch (error) {
        vscode.window.showErrorMessage(`Failed to generate file tree: ${error}`);
      }
    })
  );

  return disposables;
}

async function generateFileTree(
  rootPath: string,
  maxDepth: number = 10,
  forceShowIcons?: boolean
): Promise<string> {
  const lines: string[] = [];

  // Get user settings or use forced value
  const config = vscode.workspace.getConfiguration('filetreeproai');
  const showIcons =
    forceShowIcons !== undefined ? forceShowIcons : config.get<boolean>('showIcons', true);

  // Add header
  lines.push(`# File Tree: ${path.basename(rootPath)}`);
  lines.push('');
  lines.push(`Generated on: ${new Date().toLocaleString()}`);
  lines.push(`Root path: \`${rootPath}\``);
  lines.push('');
  lines.push(
    '**Note:** Common build folders, dependencies, and temporary files are automatically excluded.'
  );
  lines.push('');
  lines.push('```');

  // Generate tree structure
  await generateTreeLines(rootPath, '', lines, 0, maxDepth, showIcons);

  lines.push('```');
  lines.push('');
  lines.push('---');
  lines.push('*Generated by FileTreeProAI Extension*');

  return lines.join('\n');
}

async function generateTreeLines(
  currentPath: string,
  prefix: string,
  lines: string[],
  depth: number,
  maxDepth: number,
  showIcons: boolean
): Promise<void> {
  if (depth > maxDepth) {
    return;
  }

  try {
    const items = await vscode.workspace.fs.readDirectory(vscode.Uri.file(currentPath));

    // Sort items: folders first, then files
    const folders: string[] = [];
    const files: string[] = [];

    for (const [item, fileType] of items) {
      // Skip excluded folders and files
      if (shouldExclude(item)) {
        continue;
      }

      if (fileType === vscode.FileType.Directory) {
        folders.push(item);
      } else {
        files.push(item);
      }
    }

    // Sort alphabetically
    folders.sort();
    files.sort();

    // Process folders
    for (let i = 0; i < folders.length; i++) {
      const folder = folders[i];
      const isLast = i === folders.length - 1 && files.length === 0;
      const connector = isLast ? '└── ' : '├── ';
      const newPrefix = prefix + (isLast ? '    ' : '│   ');

      lines.push(`${prefix}${connector}${showIcons ? '📁 ' : ''}${folder}/`);

      const folderPath = path.join(currentPath, folder);
      await generateTreeLines(folderPath, newPrefix, lines, depth + 1, maxDepth, showIcons);
    }

    // Process files
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const isLast = i === files.length - 1;
      const connector = isLast ? '└── ' : '├── ';

      // Get file icon based on extension
      const icon = showIcons ? getFileIcon(file) + ' ' : '';
      lines.push(`${prefix}${connector}${icon}${file}`);
    }
  } catch (error) {
    lines.push(`${prefix}└── ❌ Error reading directory: ${error}`);
  }
}

function getFileIcon(filename: string): string {
  const ext = path.extname(filename).toLowerCase();

  const iconMap: { [key: string]: string } = {
    '.js': '📄',
    '.ts': '📄',
    '.jsx': '📄',
    '.tsx': '📄',
    '.json': '📄',
    '.md': '📝',
    '.txt': '📄',
    '.html': '🌐',
    '.css': '🎨',
    '.scss': '🎨',
    '.sass': '🎨',
    '.less': '🎨',
    '.py': '🐍',
    '.java': '☕',
    '.cpp': '⚙️',
    '.c': '⚙️',
    '.h': '⚙️',
    '.go': '🐹',
    '.rs': '🦀',
    '.php': '🐘',
    '.rb': '💎',
    '.swift': '🍎',
    '.kt': '☕',
    '.scala': '☕',
    '.sh': '🐚',
    '.bat': '🐚',
    '.ps1': '🐚',
    '.yml': '⚙️',
    '.yaml': '⚙️',
    '.xml': '📄',
    '.svg': '🖼️',
    '.png': '🖼️',
    '.jpg': '🖼️',
    '.jpeg': '🖼️',
    '.gif': '🖼️',
    '.ico': '🖼️',
    '.pdf': '📕',
    '.zip': '📦',
    '.tar': '📦',
    '.gz': '📦',
    '.rar': '📦',
    '.7z': '📦',
    '.gitignore': '🚫',
    '.env': '🔒',
    '.lock': '🔒',
    '.log': '📋',
    '.tmp': '🗑️',
    '.cache': '🗑️',
  };

  return iconMap[ext] || '📄';
}

function shouldExclude(item: string): boolean {
  // Get user-defined exclusions from settings
  const config = vscode.workspace.getConfiguration('filetreeproai');
  const userExclusions = config.get<string[]>('exclude', []);

  // Common folders and files to exclude
  const defaultExcludePatterns = [
    // Build and dependency folders
    'node_modules',
    'dist',
    'build',
    'out',
    'target',
    'bin',
    'obj',
    '.next',
    '.nuxt',
    '.output',
    'coverage',

    // Version control
    '.git',
    '.svn',
    '.hg',

    // IDE and editor folders
    '.vscode',
    '.idea',
    '.vs',
    '.cursor',

    // Environment and config
    '.env',
    '.env.local',
    '.env.production',
    '.env.development',
    'venv',
    '.venv',
    'env',
    '.python-version',

    // OS generated
    '.DS_Store',
    'Thumbs.db',
    '.Trash',

    // Logs and temp files
    '*.log',
    '*.tmp',
    '*.cache',
    '*.pyc',
    '__pycache__',

    // Package managers
    'package-lock.json',
    'yarn.lock',
    'pnpm-lock.yaml',
    'composer.lock',
    'Gemfile.lock',

    // Build artifacts
    '*.min.js',
    '*.min.css',
    '*.map',

    // Generated files
    '.eslintcache',
    '.prettierignore',
    '.gitignore',
    '.gitattributes',
  ];

  // Combine default and user exclusions
  const excludePatterns = [...defaultExcludePatterns, ...userExclusions];

  const itemLower = item.toLowerCase();

  // Check exact matches (case-insensitive)
  if (excludePatterns.some(pattern => pattern.toLowerCase() === itemLower)) {
    return true;
  }

  // Check wildcard patterns (case-insensitive)
  for (const pattern of excludePatterns) {
    if (pattern.includes('*')) {
      const regex = new RegExp(pattern.replace('*', '.*'), 'i'); // 'i' flag for case-insensitive
      if (regex.test(item)) {
        return true;
      }
    }
  }

  // Check for common build/artifact patterns
  if (
    itemLower.includes('build') ||
    itemLower.includes('dist') ||
    itemLower.includes('cache') ||
    itemLower.includes('temp') ||
    itemLower.includes('tmp')
  ) {
    return true;
  }

  return false;
}
